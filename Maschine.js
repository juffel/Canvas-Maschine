// Generated by CoffeeScript 1.3.3
(function() {
  var Maschine, newID;

  Maschine = (function() {
    var canvasName, frameRate, objects, timeStamp;

    objects = [];

    canvasName = "";

    timeStamp = 0;

    frameRate = 25;

    function Maschine(sectionID, dimX, dimY) {
      var sect;
      this.sectionID = sectionID;
      this.dimX = dimX;
      this.dimY = dimY;
      this.canvasName = newID();
      this.timeStamp = Date.prototype.getTime();
      sect = document.getElementById(this.sectionID);
      sect.innerHTML = "<canvas id=" + this.canvasName + " width=" + this.dimX + " height=" + this.dimY + " style='border:1px solid #000000';>" + "</canvas>";
    }

    Maschine.prototype.registerNewObject = function(gObj) {
      objects.splice(objects.length, 0, gObj);
      this._drawRectangle(gObj);
      return this._checkRefresh();
    };

    Maschine.prototype.removeObject = function(gObj) {
      var ind;
      ind = objects.indexOf(gObj);
      return objects.splice(ind, 1);
    };

    Maschine.prototype.updateObject = function(gObj, new_gObj) {
      var ind;
      ind = objects.indexOf(gObj);
      return objects[ind] = new_gObj;
    };

    Maschine.prototype.userInput = function() {};

    Maschine.prototype._redrawCanvas = function() {
      var context, o, _i, _len, _results;
      context = this.getContext();
      context.clearRect(0, 0, this.dimX, this.dimY);
      _results = [];
      for (_i = 0, _len = objects.length; _i < _len; _i++) {
        o = objects[_i];
        _results.push(this._drawRectangle(o, context));
      }
      return _results;
    };

    Maschine.prototype._drawRectangle = function(rect) {
      var context;
      context = this.getContext();
      return this._drawRectangle(rect, context);
    };

    Maschine.prototype._drawRectangle = function(rect, context) {
      var x1, x2, y1, y2;
      context.fillStyle = rect.color;
      x1 = rect.posX;
      x2 = rect.posX + rect.dimX;
      y1 = rect.posY;
      y2 = rect.posY + rect.dimY;
      return context.fillRect(x1, y1, x2, y2);
    };

    Maschine.prototype._checkRefresh = function() {
      var curTime;
      curTime = Date.prototype.getTime();
      if ((curTime - timeStamp) > (1000 / this.frameRate)) {
        this._redrawCanvas();
        return this.timeStamp = curTime;
      }
    };

    Maschine.prototype.getContext = function() {
      var canvas;
      canvas = document.getElementById(this.canvasName);
      return canvas.getContext("2d");
    };

    return Maschine;

  })();

  newID = function() {
    return Math.random() * 16;
  };

  window.Maschine = Maschine;

}).call(this);
