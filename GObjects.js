// Generated by CoffeeScript 1.3.3
(function() {
  var GObject, Line, Point, Polygon, Rectangle,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  GObject = (function() {

    function GObject(color, posX, posY) {
      this.color = color;
      this.setPos = __bind(this.setPos, this);

      this.pos = new Point(posX, posY);
    }

    GObject.prototype.setPos = function(posX, posY) {
      this.pos.x = posX;
      return this.pos.y = posY;
    };

    return GObject;

  })();

  window.GObject = GObject;

  Rectangle = (function(_super) {

    __extends(Rectangle, _super);

    function Rectangle(color, posX, posY, dimX, dimY) {
      this.dimX = dimX;
      this.dimY = dimY;
      Rectangle.__super__.constructor.call(this, color, posX, posY);
    }

    Rectangle.prototype.draw = function(context) {
      context.fillStyle = this.color;
      return context.fillRect(this.posX, this.posY, this.dimX, this.dimY);
    };

    return Rectangle;

  })(GObject);

  Line = (function(_super) {

    __extends(Line, _super);

    function Line(color, x1, y1, toX, toY) {
      this.toX = toX;
      this.toY = toY;
      Line.__super__.constructor.call(this, color, x1, y1);
    }

    Line.prototype.draw = function(context) {
      context.beginPath();
      context.fillStyle = this.color;
      context.moveTo(this.pos.x, this.pos.y);
      context.lineTo(this.toX, this.toY);
      context.stroke();
      return context.closePath();
    };

    return Line;

  })(GObject);

  Point = (function() {

    function Point(x, y, z) {
      this.x = x;
      this.y = y;
      this.z = z != null ? z : void 0;
    }

    return Point;

  })();

  Polygon = (function(_super) {

    __extends(Polygon, _super);

    function Polygon(color, points) {
      this.points = points;
      Polygon.__super__.constructor.call(this, color, this.points[0].x, this.points[0].y);
    }

    Polygon.prototype.draw = function(context) {
      var p, _i, _len, _ref;
      context.beginPath();
      context.fillStyle = this.color;
      context.moveTo(this.points[0].x, this.points[0].y);
      _ref = this.points;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        context.lineTo(p.x, p.y);
      }
      context.lineTo(this.points[0].x, this.points[0].y);
      context.fill();
      return context.closePath();
    };

    return Polygon;

  })(GObject);

  window.Rectangle = Rectangle;

  window.Point = Point;

  window.Line = Line;

  window.Polygon = Polygon;

}).call(this);
