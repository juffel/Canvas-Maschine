// Generated by CoffeeScript 1.3.3
(function() {
  var GObject, Line, Point, Polygon, Rectangle, Shape,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  GObject = (function() {

    function GObject(x, y) {
      this.x = x;
      this.y = y;
      this.moveTo = __bind(this.moveTo, this);

      this.move = __bind(this.move, this);

      this.set = __bind(this.set, this);

      this.setY = __bind(this.setY, this);

      this.setX = __bind(this.setX, this);

      this.getY = __bind(this.getY, this);

      this.getX = __bind(this.getX, this);

    }

    GObject.prototype.getX = function() {
      return this.x;
    };

    GObject.prototype.getY = function() {
      return this.y;
    };

    GObject.prototype.setX = function(x) {
      return this.x = x;
    };

    GObject.prototype.setY = function(y) {
      return this.y = y;
    };

    GObject.prototype.set = function(x, y) {
      this.setX(x);
      return this.setY(y);
    };

    GObject.prototype.move = function(x, y) {
      this.x += x;
      return this.y += y;
    };

    GObject.prototype.moveTo = function(x, y) {
      this.x = x;
      return this.y = y;
    };

    return GObject;

  })();

  Point = (function(_super) {

    __extends(Point, _super);

    function Point() {
      return Point.__super__.constructor.apply(this, arguments);
    }

    return Point;

  })(GObject);

  Shape = (function(_super) {

    __extends(Shape, _super);

    function Shape(color, x, y) {
      this.color = color;
      this.setColor = __bind(this.setColor, this);

      this.getColor = __bind(this.getColor, this);

      Shape.__super__.constructor.call(this, x, y);
    }

    Shape.prototype.getColor = function() {
      return this.color;
    };

    Shape.prototype.setColor = function(color) {
      return this.color = color;
    };

    return Shape;

  })(GObject);

  Polygon = (function(_super) {

    __extends(Polygon, _super);

    function Polygon(color, points) {
      this.points = points;
      this.getPoints = __bind(this.getPoints, this);

      this.getPoint = __bind(this.getPoint, this);

      this.moveTo = __bind(this.moveTo, this);

      this.move = __bind(this.move, this);

      this.stroke = __bind(this.stroke, this);

      this.fill = __bind(this.fill, this);

      this.setY = __bind(this.setY, this);

      this.setX = __bind(this.setX, this);

      this.getY = __bind(this.getY, this);

      this.getX = __bind(this.getX, this);

      Polygon.__super__.constructor.call(this, color, this.points[0].getX(), this.points[0].getY());
      this.fill = true;
    }

    Polygon.prototype.getX = function() {
      return this.points[0].getX();
    };

    Polygon.prototype.getY = function() {
      return this.points[0].getY();
    };

    Polygon.prototype.setX = function(x) {
      return this.points[0].setX(x);
    };

    Polygon.prototype.setY = function(y) {
      return this.points[0].setY(y);
    };

    Polygon.prototype.fill = function() {
      return this.fill = true;
    };

    Polygon.prototype.stroke = function() {
      return this.fill = false;
    };

    Polygon.prototype.move = function(x, y) {
      var p, _i, _len, _ref, _results;
      _ref = this.points;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        _results.push(p.move(x, y));
      }
      return _results;
    };

    Polygon.prototype.moveTo = function(x, y) {
      var moveX, moveY;
      moveX = x - this.getX();
      moveY = y - this.getY();
      return this.move(moveX, moveY);
    };

    Polygon.prototype.getPoint = function(ind) {
      return this.points[ind];
    };

    Polygon.prototype.getPoints = function() {
      return this.points;
    };

    Polygon.prototype.draw = function(context) {
      var p, _i, _len, _ref;
      context.beginPath();
      context.fillStyle = this.color;
      context.moveTo(this.getX(), this.getY());
      _ref = this.points;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        context.lineTo(p.getX(), p.getY());
      }
      context.lineTo(this.getX(), this.getY());
      if (this.fill) {
        context.fill();
      } else {
        context.stroke();
      }
      return context.closePath();
    };

    return Polygon;

  })(Shape);

  Rectangle = (function(_super) {

    __extends(Rectangle, _super);

    function Rectangle(color, point, dimX, dimY) {
      this.point = point;
      this.dimX = dimX;
      this.dimY = dimY;
      Rectangle.__super__.constructor.call(this, color, [this.point, new Point(this.point.getX() + this.dimX, this.point.getY()), new Point(this.point.getX() + this.dimX, this.point.getY() + this.dimY), new Point(this.point.getX(), this.point.getY() + this.dimY)]);
    }

    return Rectangle;

  })(Polygon);

  Line = (function(_super) {

    __extends(Line, _super);

    function Line(color, p1, p2) {
      this.p2 = p2;
      this.setTo = __bind(this.setTo, this);

      this.getToY = __bind(this.getToY, this);

      this.getToX = __bind(this.getToX, this);

      Line.__super__.constructor.call(this, color, [p1, this.p2]);
      this.stroke();
    }

    Line.prototype.getToX = function() {
      return this.getPoint(1).getX();
    };

    Line.prototype.getToY = function() {
      return this.getPoint(1).getY();
    };

    Line.prototype.setTo = function(toX, toY) {
      this.getPoint(1).setX(toX);
      return this.getPoint(1).setY(toY);
    };

    return Line;

  })(Polygon);

  window.GObject = GObject;

  window.Point = Point;

  window.Polygon = Polygon;

  window.Rectangle = Rectangle;

  window.Line = Line;

}).call(this);
