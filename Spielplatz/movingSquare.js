// Generated by CoffeeScript 1.3.3
(function() {
  var collide, inst, overlap, overlappy, twoWay,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  twoWay = (function(_super) {

    __extends(twoWay, _super);

    function twoWay() {
      this.ev_keydown = __bind(this.ev_keydown, this);

      this.ev_mouse = __bind(this.ev_mouse, this);

      var a, b, height, mitte, recPoints, width,
        _this = this;
      this.speed = 10;
      width = Math.floor(window.innerWidth - 20);
      height = Math.floor(window.innerHeight - 20);
      twoWay.__super__.constructor.call(this, "canvasArea", width, height);
      mitte = new Point(Math.floor(this.dimX / 2), Math.floor(this.dimY / 2));
      this.rectKey = new Rectangle("#FF0040", mitte, 40, 40);
      this.rectMouse;
      this.addObject(this.rectKey);
      recPoints = this.rectKey.getPoints();
      a = new PCircle(recPoints[0], 10, mitte);
      setInterval((function() {
        return a.forward(5);
      }), 100);
      b = new PCircle(recPoints[2], 30, mitte);
      setInterval((function() {
        return b.forward(5);
      }), 100);
    }

    twoWay.prototype.ev_mouse = function(event) {
      if (overlap(this.rectKey, event.clientX, event.clientY)) {
        return;
      }
      if (this.rectMouse === void 0) {
        this.rectMouse = new Rectangle("#0B0B61", new Point(event.clientX, event.clientY), 40, 40);
        this.addObject(this.rectMouse);
      } else {
        this.rectMouse.moveTo(event.clientX, event.clientY);
      }
      return this._refresh();
    };

    twoWay.prototype.ev_keydown = function(event) {
      var oldX, oldY;
      oldX = this.rectKey.getX();
      oldY = this.rectKey.getY();
      if (event.keyCode === 37) {
        this.rectKey.move(-this.speed, 0);
      } else if (event.keyCode === 38) {
        this.rectKey.move(0, -this.speed);
      } else if (event.keyCode === 39) {
        this.rectKey.move(this.speed, 0);
      } else if (event.keyCode === 40) {
        this.rectKey.move(0, this.speed);
      }
      if (overlappy(this.rectKey, this.rectMouse)) {
        return this.rectKey.set(oldX, oldY);
      } else {
        return this._refresh();
      }
    };

    return twoWay;

  })(Maschine);

  overlappy = function(sq1, sq2) {
    var bottom1, bottom2, left1, left2, right1, right2, top1, top2;
    left1 = sq1.getX();
    left2 = sq2.getX();
    right1 = sq1.getX() + sq2.dimX;
    right2 = sq2.getX() + sq2.dimX;
    top1 = sq1.getY();
    top2 = sq2.getY();
    bottom1 = sq1.getY() + sq1.dimY;
    bottom2 = sq2.getY() + sq2.dimY;
    return collide(left1, right1, top1, bottom1, left2, right2, top2, bottom2);
  };

  overlap = function(sq1, x2, y2) {
    return x2 >= sq1.getX() - sq1.dimX && x2 <= sq1.getX() + sq1.dimX && y2 >= sq1.getY() - sq1.dimY && y2 <= sq1.getY() + sq1.dimY;
  };

  collide = function(left1, right1, top1, bottom1, left2, right2, top2, bottom2) {
    if (left1 > right2) {
      return false;
    } else if (right1 < left2) {
      return false;
    } else if (top1 > bottom2) {
      return false;
    } else if (bottom1 < top2) {
      return false;
    } else {
      return true;
    }
  };

  inst = new twoWay();

}).call(this);
