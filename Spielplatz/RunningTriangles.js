// Generated by CoffeeScript 1.3.3
(function() {
  var TestMaschine, testMaschine,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  TestMaschine = (function(_super) {
    var pols;

    __extends(TestMaschine, _super);

    pols = [];

    function TestMaschine(canvasName, width, height) {
      this.ev_mouse = __bind(this.ev_mouse, this);

      this.ev_keydown = __bind(this.ev_keydown, this);

      var i, p, points, pol, xValue, _i, _j, _len, _ref,
        _this = this;
      TestMaschine.__super__.constructor.call(this, canvasName, width, height);
      this.pols = [];
      points = [];
      points[0] = new Point(0, 100);
      points[1] = new Point(200, 100);
      points[2] = new Point(100, 200);
      xValue = Math.floor(window.innerWidth / 200) + 1;
      for (i = _i = 0; 0 <= xValue ? _i <= xValue : _i >= xValue; i = 0 <= xValue ? ++_i : --_i) {
        this.pols[i] = new Polygon("#000000", points);
        points = (function() {
          var _j, _len, _results;
          _results = [];
          for (_j = 0, _len = points.length; _j < _len; _j++) {
            p = points[_j];
            _results.push(new Point(p.x + 200, p.y));
          }
          return _results;
        })();
      }
      _ref = this.pols;
      for (_j = 0, _len = _ref.length; _j < _len; _j++) {
        pol = _ref[_j];
        this.addObject(pol);
      }
      setInterval((function() {
        return _this.shift();
      }), 100);
    }

    TestMaschine.prototype.shift = function() {
      var i, nextPol, pol, thisPol, _i, _j, _len, _ref, _ref1, _results;
      _ref = this.pols;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pol = _ref[_i];
        pol.move(5, 0);
      }
      _results = [];
      for (i = _j = 0, _ref1 = this.pols.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        if (this.pols[i].points[0].x > window.innerWidth) {
          thisPol = this.pols[i];
          nextPol = this.pols[(i + 1) % this.pols.length];
          _results.push(thisPol.moveTo(nextPol.getX(), nextPol.getY()));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    TestMaschine.prototype.ev_keydown = function(event) {
      var oldX, oldY, p, speed, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
      oldX = this.poly.points[0].x;
      oldY = this.poly.points[0].y;
      speed = 4;
      if (event.keyCode === 37) {
        _ref = this.poly.points;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          p = _ref[_i];
          p.x -= speed;
        }
      } else if (event.keyCode === 38) {
        _ref1 = this.poly.points;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          p = _ref1[_j];
          p.y -= speed;
        }
      } else if (event.keyCode === 39) {
        _ref2 = this.poly.points;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          p = _ref2[_k];
          p.x += speed;
        }
      } else if (event.keyCode === 40) {
        _ref3 = this.poly.points;
        for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
          p = _ref3[_l];
          p.y += speed;
        }
      }
      return this._refresh();
    };

    TestMaschine.prototype.ev_mouse = function(event) {
      return this._refresh();
    };

    return TestMaschine;

  })(Maschine);

  testMaschine = new TestMaschine("canvasArea", window.innerWidth - 20, window.innerHeight - 20);

  document.documentElement.style.overflow = 'hidden';

}).call(this);
