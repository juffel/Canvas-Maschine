// Generated by CoffeeScript 1.3.3
(function() {
  var inst, overlap, overlappy, twoWay,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  twoWay = (function(_super) {

    __extends(twoWay, _super);

    function twoWay() {
      this.ev_keydown = __bind(this.ev_keydown, this);

      this.ev_mouse = __bind(this.ev_mouse, this);

      var ch_x, ch_y, height, width;
      this.speed = 10;
      width = Math.floor(window.innerWidth - 20);
      height = Math.floor(window.innerHeight - 20);
      twoWay.__super__.constructor.call(this, "canvasArea", width, height);
      ch_x = Math.floor(this.dimX / 2);
      ch_y = Math.floor(this.dimY / 2);
      this.charaKey = new Rectangle("#FF0040", ch_x - 20, ch_y - 20, 40, 40);
      this.charaMouse;
      this.addObject(this.charaKey);
    }

    twoWay.prototype.ev_mouse = function(event) {
      if (overlap(this.charaKey, event.clientX, event.clientY)) {
        return;
      }
      if (this.charaMouse === void 0) {
        this.charaMouse = new Rectangle("#0B0B61", event.clientX, event.clientY, 40, 40);
        this.addObject(this.charaMouse);
      } else {
        this.charaMouse.posX = event.clientX;
        this.charaMouse.posY = event.clientY;
      }
      return this._refresh();
    };

    twoWay.prototype.ev_keydown = function(event) {
      if (event.keyCode === 37) {
        this.charaKey.posX -= this.speed;
      } else if (event.keyCode === 38) {
        this.charaKey.posY -= this.speed;
      } else if (event.keyCode === 39) {
        this.charaKey.posX += this.speed;
      } else if (event.keyCode === 40) {
        this.charaKey.posY += this.speed;
      }
      return this._refresh();
    };

    return twoWay;

  })(Maschine);

  overlappy = function(sq1, sq2) {
    return overlap(sq1, sq2.posX, sq2.posY);
  };

  overlap = function(sq1, x2, y2) {
    return x2 >= sq1.posX - sq1.dimX && x2 <= sq1.posX + sq1.dimX && y2 >= sq1.posY - sq1.dimY && y2 <= sq1.posY + sq1.dimY;
  };

  inst = new twoWay();

}).call(this);
